; =============================================================================
; MANI Xdebug Configuration (20-xdebug.ini)
;
; Description:
;   Configures Xdebug 3 for a typical Docker development workflow.
;   It enables both development helpers (like improved var_dump) and step
;   debugging.
; =============================================================================

[xdebug]
; --- Core Settings ---
; This enables Xdebug's functionality. It must be 'zend_extension', not 'extension'.
zend_extension=xdebug

; --- Mode Configuration ---
; 'develop': Enables development helpers (e.g., enhanced var_dump).
; 'debug': Enables step debugging.
; You can enable multiple modes by separating them with a comma.
xdebug.mode = develop,debug

; --- Step Debugger Settings ---
; 'yes': The debugger will try to connect to your IDE on every request.
;        This is very convenient for development.
; 'trigger': The debugger only activates if a specific trigger is present
;            (e.g., a browser cookie or query parameter). Better for performance.
xdebug.start_with_request = yes

; --- Connection Settings ---
; 'host.docker.internal' is a special DNS name that Docker provides for
; containers to connect back to the host machine where your IDE is running.
xdebug.client_host = host.docker.internal

; The standard port for Xdebug to connect on. Ensure your IDE is listening on this port.
xdebug.client_port = 9003

; --- Output Settings ---
; Set a high value to prevent var_dump() from truncating large arrays/objects.
xdebug.var_display_max_depth = 10
xdebug.var_display_max_children = 256
xdebug.var_display_max_data = 1024
