#!/usr/bin/env bash

set -e

DOCKER_DIR=".docker"
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        --docker-dir)
            if [ -n "$2" ]; then
                DOCKER_DIR="$2"
                shift 2 # Shift past the argument name and value
            else
                echo "Error: --docker-dir requires a directory name." >&2
                exit 1
            fi
            ;;
        *)
            break
            ;;
    esac
done

STUBS_DIR="${DOCKER_DIR}/stubs/services"
PROJECT_ROOT="$(pwd)"
REPO_ROOT="${PROJECT_ROOT}/${DOCKER_DIR}"
DOCKER_COMPOSE_DEST="${PROJECT_ROOT}/docker-compose.yml"


log() {
    echo "[php-contenv] $1"
}



hot_log() {
    if command_exists tput; then
        echo "$(tput setaf 3)$(tput bold)[php-contenv] $1$(tput sgr0)"
    else
        echo "[php-contenv] $1"
    fi
}



error() {
    echo "[php-contenv ERROR] $1" >&2
    exit 1
}


command_exists() {
    command -v "$1" >/dev/null 2>&1
}


get_input_with_default() {
    local prompt="$1"
    local default_value="$2"
    local input_value

    read -p "$prompt [$default_value]: " input_value
    echo "${input_value:-$default_value}"
}


is_service_selected() {
    local service_name="$1"
    local selected_services_array=("${@:2}")
    for selected in "${selected_services_array[@]}"; do
        if [[ "$selected" == "${service_name}-service.stub.yml" ]]; then
            return 0 # Service found
        fi
    done
    return 1 # Service not found
}


log_env_variables_to_add() {
    local context="$1"
    shift 1
    local services_list=("$@")

    hot_log "Please add the following variables to your project's .env file:"

    if [[ "$context" == "setup" ]]; then
         log "APP_PORT=8080"
         log "VITE_PORT=5173"
         log "WWWUSER=1000"
         log "WWWGROUP=1000"
         log "DEEM_XDEBUG_MODE=off"
         log "DEEM_XDEBUG_CONFIG=client_host=host.docker.internal"
         log ""
    fi


    for service_item in "${services_list[@]}"; do
        local service_name="${service_item%-service.stub.yml}"

        case "$service_name" in
            mysql|pgsql|mariadb)
                log "# Database Configuration for ${service_name} service"
                log "DB_CONNECTION=${service_name}"
                log "DB_HOST=${service_name}"
                if [[ "$service_name" == "pgsql" ]]; then
                    log "DB_PORT=5432"
                else
                    log "DB_PORT=3306"
                fi
                log "DB_DATABASE=laravel"
                log "DB_USERNAME=root"
                log "DB_PASSWORD=complex!Passw0rd"
                log ""
                # Conditional DB port forwarding
                if [[ "$service_name" == "pgsql" ]]; then
                    log "FORWARD_DB_PORT=5432"
                else
                    log "FORWARD_DB_PORT=3306"
                fi
                log ""
                ;;
            mailpit)
                log "# Mailpit Configuration"
                log "MAIL_MAILER=smtp"
                log "MAIL_HOST=mailpit"
                log "MAIL_PORT=1025"
                log "MAIL_USERNAME=null"
                log "MAIL_PASSWORD=null"
                log "MAIL_ENCRYPTION=null"
                log "MAIL_FROM_ADDRESS=\"hello@example.com\""
                log "MAIL_FROM_NAME=\"\${APP_NAME}\""
                log "FORWARD_MAILPIT_PORT=1025"
                log "FORWARD_MAILPIT_DASHBOARD_PORT=8025"
                log ""
                ;;
            redis)
                log "# Redis Configuration"
                log "REDIS_HOST=redis"
                log "REDIS_PASSWORD=null"
                log "REDIS_PORT=6379"
                log ""
                ;;
            typesense)
                 log "# Typesense Configuration"
                 log "TYPESENSE_HOST=typesense"
                 log "TYPESENSE_PORT=8108"
                 log "TYPESENSE_PROTOCOL=http"
                 log "TYPESENSE_API_KEY=xyz"
                 log "FORWARD_TYPESENSE_PORT=8108"
                 log ""
                 ;;
            *)
                log "# Review .env variables for the ${service_name} service."
                ;;
        esac
    done

    hot_log "Review and update your .env file with these and any other project-specific variables."
}


log_gitignore_to_add() {
    hot_log "Please add the following patterns to your project's .gitignore file:"
    log "/logs/"
    log ".env"
    log "docker-compose.override.yml" # If you plan to use overrides
    log "supervisord*" # Files created by supervisord
    hot_log "Ensure these are not already present or conflict with existing patterns."
}


# --- Setup Command ---
setup_environment() {
    log "Starting php-contenv setup..."


    if ! command_exists docker; then
        error "Docker is not installed. Please install Docker Desktop or Docker Engine."
    fi
    if ! command_exists docker compose; then

        if ! command_exists docker-compose; then
            log "Using the older 'docker-compose' command."
            DOCKER_COMPOSE_CMD="docker-compose"
        else
            error "Docker Compose is not installed. Please install Docker Compose V2 or the standalone docker-compose."
        fi
    else
        log "Using 'docker compose' (Docker Compose V2)."
        DOCKER_COMPOSE_CMD="docker compose"
    fi


    if [ ! -d "$DOCKER_DIR" ]; then
        error "'${DOCKER_DIR}' directory not found. Please run this script from your project root directory after adding php-contenv as a git submodule (e.g., git submodule add https://github.com/techgonia-devjio/php-contenv ${DOCKER_DIR}). If you used a different name for the submodule, use the --docker-dir flag."
    fi


    if [ -f "$DOCKER_COMPOSE_DEST" ]; then
        if ! grep -q "# Generated by php-contenv setup script" "$DOCKER_COMPOSE_DEST"; then
            error "A docker-compose.yml file already exists in the project root and was not generated by this script. Please back it up manually before running setup."
        else
             log "Existing docker-compose.yml found (generated by php-contenv). Backing it up."
             local timestamp=$(date +"%Y%m%d_%H%M%S")
             local backup_file="${DOCKER_COMPOSE_DEST}.bak_${timestamp}"
             cp "$DOCKER_COMPOSE_DEST" "$backup_file"
             log "Backed up to $backup_file"
        fi
    fi


    log "Gathering environment details..."

    available_versions=($(ls -d "$DOCKER_DIR"/[0-9]*.[0-9]* 2>/dev/null | xargs -n 1 basename))

    if [ ${#available_versions[@]} -eq 0 ]; then
        error "No PHP version directories found in '$DOCKER_DIR'."
    fi

    echo "Available PHP Versions:"
    select php_version in "${available_versions[@]}"; do
        if [[ " ${available_versions[@]} " =~ " ${php_version} " ]]; then
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done

    available_servers=($(ls -d "$DOCKER_DIR/$php_version"/* 2>/dev/null | xargs -n 1 basename))
    # Filter out 'php' and 'database' directories
    available_servers=($(echo "${available_servers[@]}" | tr ' ' '\n' | grep -v '^php$' | grep -v '^database$' | tr '\n' ' '))

    if [ ${#available_servers[@]} -eq 0 ]; then
        error "No server configurations found for PHP version $php_version in '$DOCKER_DIR/$php_version'."
    fi

    echo "Available Web Servers for PHP $php_version:"
    select web_server in "${available_servers[@]}"; do
        if [[ " ${available_servers[@]} " =~ " ${web_server} " ]]; then
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done

    log "You selected PHP $php_version with $web_server."

    DOCKER_NETWORK_NAME=$(get_input_with_default "Enter Docker network name" "optimesh")
    log "Using Docker network: $DOCKER_NETWORK_NAME"

    log "Select optional services to include (y/N for each):"
    available_service_stubs=($(ls "$STUBS_DIR"/*.stub.yml 2>/dev/null | xargs -n 1 basename | grep -v '^app-service.stub.yml$'))

    selected_services=()
    if [ ${#available_service_stubs[@]} -eq 0 ]; then
        log "No optional service stubs found in '$STUBS_DIR'."
    else
        for service_stub in "${available_service_stubs[@]}"; do
            local service_name="${service_stub%.stub.yml}"
            read -p "Include ${service_name} service? (y/N): " include_service
            if [[ "$include_service" =~ ^[Yy]$ ]]; then
                selected_services+=("$service_stub")
            fi
        done
    fi

    log "Selected services: ${selected_services[*]:-None}"


    generate_docker_compose "$php_version" "$web_server" "$DOCKER_NETWORK_NAME" "${selected_services[@]}"

    create_logs_directory

    log_env_variables_to_add "setup" "${selected_services[@]}"
    log_gitignore_to_add

    log "Setup complete! You can now build and start your Docker environment:"
    log "$DOCKER_COMPOSE_CMD build"
    log "$DOCKER_COMPOSE_CMD up -d"
    hot_log "Remember to run 'composer install' and 'npm install' inside the container after the first build."
}

generate_docker_compose() {
    local php_version="$1"
    local web_server="$2"
    local network_name="$3"
    shift 3
    local optional_service_stubs=("$@")

    local docker_compose_content="# Generated by php-contenv setup script\n\nservices:\n"

    local app_stub_path="${STUBS_DIR}/app-service.stub.yml"
    if [ ! -f "$app_stub_path" ]; then
        error "App service stub not found: $app_stub_path"
    fi
    local app_service_content=$(cat "$app_stub_path")
    local app_volumes=""
    # Replace placeholders and insert dynamic volumes into the app service content
    # Using sed for simple replacements. More complex YAML manipulation, we need a dedicated parser/tool.
    app_service_content=$(echo "$app_service_content" | \
        sed "s|context: .docker|context: ${DOCKER_DIR}|" | \
        sed "s|dockerfile: 8.1/apache/Dockerfile|dockerfile: ${php_version}/${web_server}/Dockerfile|" | \
        awk -v volumes_content="${app_volumes}" '/environment:/ { print; next } { print }' \
    )

    docker_compose_content+="$app_service_content\n"

    local named_volumes_needed=()
    for service_stub in "${optional_service_stubs[@]}"; do
        local service_stub_path="${STUBS_DIR}/${service_stub}"
        if [ ! -f "$service_stub_path" ]; then
            log "Warning: Service stub not found: $service_stub_path. Skipping."
            continue
        fi
        local service_content=$(cat "$service_stub_path")

        # Simple check for named volumes in the stub (e.g., 'volumes:')
        if echo "$service_content" | grep -q 'volumes:'; then
             # Extract named volume names (basic parsing)
             local service_volumes=$(echo "$service_content" | sed -n '/volumes:/,/^[^[:space:]]/p' | grep -v 'volumes:' | grep -v '^- ' | sed 's/:.*//' | xargs)
             for vol in $service_volumes; do
                 if [[ ! " ${named_volumes_needed[@]} " =~ " ${vol} " ]]; then
                     named_volumes_needed+=("$vol")
                 fi
             done
        fi

        docker_compose_content+="\n$service_content\n"
    done

    # Add networks definition
    docker_compose_content+="\nnetworks:\n"
    docker_compose_content+="  $network_name:\n"
    docker_compose_content+="    driver: bridge\n"
    docker_compose_content+="    name: optimesh\n"

    if [ ${#named_volumes_needed[@]} -gt 0 ]; then
        docker_compose_content+="\nvolumes:\n"
        for vol in "${named_volumes_needed[@]}"; do
            docker_compose_content+="  $vol:\n"
        done
    fi

    log "Writing generated docker-compose.yml to $DOCKER_COMPOSE_DEST"
    echo "$docker_compose_content" > "$DOCKER_COMPOSE_DEST"
    log "Successfully generated docker-compose.yml"
}

# Function to create necessary log directories on the host
create_logs_directory() {
    local LOGS_DIR="${PROJECT_ROOT}/logs"
    if [ ! -d "$LOGS_DIR" ]; then
        log "Creating logs directory: $LOGS_DIR"
        mkdir -p "$LOGS_DIR"
        # Create subdirectories for clarity
        mkdir -p "$LOGS_DIR/php" "$LOGS_DIR/apache2" "$LOGS_DIR/nginx" "$LOGS_DIR/supervisor"
    else
        log "Logs directory already exists: $LOGS_DIR"
    fi
}

# --- Add Service Command ---
add_service_to_compose() {
    local service_name="$1"
    local service_stub="${service_name}-service.stub.yml"
    local service_stub_path="${STUBS_DIR}/${service_stub}"

    if [ -z "$service_name" ]; then
        error "Please specify the service name to add (e.g., docky add-service typesense)."
    fi

    if [ ! -f "$DOCKER_COMPOSE_DEST" ]; then
        error "docker-compose.yml not found in the project root. Please run 'docky setup' first."
    fi

    if [ ! -f "$service_stub_path" ]; then
        error "Service stub not found for '${service_name}': ${service_stub_path}. Please ensure the stub file exists in ${STUBS_DIR}."
    fi

    local compose_content=$(cat "$DOCKER_COMPOSE_DEST")

    if echo "$compose_content" | grep -q -E "^[[:space:]]*${service_name}:"; then
        hot_log "Service '${service_name}' already exists in docker-compose.yml. Skipping."
        log_env_variables_to_add "add-service" "$service_stub"
        return 0
    fi

    log "Adding service '${service_name}' from stub: ${service_stub_path}"

    local service_content=$(cat "$service_stub_path")

    local insert_line=$(echo "$compose_content" | grep -n "^networks:" | head -n 1 | cut -d: -f1)
    if [ -z "$insert_line" ]; then
        insert_line=$(echo "$compose_content" | grep -n "^volumes:" | head -n 1 | cut -d: -f1)
    fi

    # Use awk for reliable multi-line insertion,Pipe service_content into awk and use getline
    if [ -z "$insert_line" ]; then
        echo -e "\n$service_content" >> "$DOCKER_COMPOSE_DEST"
    else
        echo "$compose_content" | awk -v line="$insert_line" '
        BEGIN {
            # Read the service content from stdin (piped input)
            service_content = ""
            while ((getline line_from_stdin < "-") > 0) {
                service_content = service_content line_from_stdin "\n"
            }
            # Remove the trailing newline added by the loop
            sub(/\n$/, "", service_content)
        }
        NR == line {
            print service_content;
            print;
            next;
        }
        { print }
        ' > temp_compose.yml
        mv temp_compose.yml "$DOCKER_COMPOSE_DEST"
    fi


    log "Service '${service_name}' added to docker-compose.yml."

    if echo "$service_content" | grep -q 'volumes:'; then
         hot_log "Checking for named volumes in the '${service_name}' service stub..."
         local service_volumes=$(echo "$service_content" | sed -n '/volumes:/,/^[^[:space:]]/p' | grep -v 'volumes:' | grep -v '^- ' | sed 's/:.*//' | xargs)
         local root_volumes_section=$(cat "$DOCKER_COMPOSE_DEST" | sed -n '/^volumes:/,/^[^[:space:]]/p')

         for vol in $service_volumes; do
             if ! echo "$root_volumes_section" | grep -q "^${vol}:"; then
                 hot_log "Named volume '${vol}' not found in root 'volumes:' section. Please add it manually to your docker-compose.yml:"
                 log "volumes:"
                 log "  ${vol}:"
                 log ""
             else
                 log "Named volume '${vol}' already defined in root 'volumes:' section."
             fi
         done
    fi

    if echo "$service_content" | grep -q 'networks:'; then
        hot_log "The '${service_name}' service stub defines a 'networks:' block. Please ensure the referenced network(s) are defined at the root level of your docker-compose.yml if they are not the main network ('${DOCKER_NETWORK_NAME}')."
    fi


    log_env_variables_to_add "add-service" "$service_stub"

    hot_log "Service '${service_name}' successfully added."
    hot_log "Remember to review the updated docker-compose.yml, add any necessary named volumes or networks at the root level, and update your .env file."
    hot_log "Then run 'docker compose up -d' to start the new service."
}



create_logs_directory() {
    local LOGS_DIR="${PROJECT_ROOT}/logs"
    if [ ! -d "$LOGS_DIR" ]; then
        log "Creating logs directory: $LOGS_DIR"
        mkdir -p "$LOGS_DIR"
        mkdir -p "$LOGS_DIR/php" "$LOGS_DIR/apache2" "$LOGS_DIR/nginx" "$LOGS_DIR/supervisor"
    else
        log "Logs directory already exists: $LOGS_DIR"
    fi
}


case "$1" in
    setup)
        setup_environment
        ;;
    add-service)
        shift
        add_service_to_compose "$@"
        ;;
    *)
        echo "Usage: $0 [--docker-dir <directory>] {setup | add-service <service_name>}"
        exit 1
        ;;
esac
